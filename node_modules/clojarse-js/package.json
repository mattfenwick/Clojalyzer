{
  "name": "clojarse-js",
  "version": "0.2.0",
  "description": "concrete parsing of Clojure code",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "unparse-js": "0.1.8",
    "data-js": "0.1.1"
  },
  "devDependencies": {
    "grunt": "~0.4.4",
    "grunt-cli": "0.1.13",
    "grunt-contrib-jshint": "~0.9.2",
    "mocha": "1.18.2"
  },
  "scripts": {
    "test": "mocha --reporter spec test/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mattfenwick/clojarse-js.git"
  },
  "keywords": [
    "Clojure",
    "parse",
    "parsing"
  ],
  "author": {
    "name": "Matt Fenwick"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/mattfenwick/clojarse-js/issues"
  },
  "homepage": "https://github.com/mattfenwick/clojarse-js",
  "readme": "[clojarse-js](http://mattfenwick.github.io/clojarse-js/)\n=================\n\nA pure Javascript library for parsing Clojure code into syntax trees.\n\n\n\n# Installation #\n\nIf you're using npm:\n\n    $ npm install clojarse-js\n\nOr clone it from github:\n\n    $ git clone git@github.com:mattfenwick/clojarse-js.git\n\n\n\n# License #\n\nMIT.  Please don't use it for evil.\n\n\n\n# Examples #\n\nImport it as a library from JavaScript code:\n\n    var c = require('clojarse-js');\n    // first the CST\n    console.log(JSON.stringify(c.parseCst('(^a ~b @c)'), null, 2));\n    // now for an AST\n    console.log(JSON.stringify(c.parseAst('(^a ~b @c)'), null, 2));\n\nOr use its simple command line interface:\n\n    $ echo '(^a ~b @c)' | node main.js\n\n\n\n# Caveats #\n\nThe goal is to parse a superset of Clojure's syntax.  Therefore, some things\nwhich clojarse-js parses may be invalid from Clojure's point of view.\n\n\n\n# Strategy #\n\n### parse CST ###\n \ndetermine start, end of each hierarchical form and token\n   \nerrors possible:  first one will terminate parsing\n\n \n### build AST ###\n\nconvert the CST into an AST, throwing away some information and simplifying\nthe structure of the tree:\n\n - expand built-in reader macros\n\n   - `#'abc` -> `(var abc)`\n   - `'qrs` -> `(quote qrs)`\n   - `@abc` -> `(clojure.core/deref abc)`\n   - `~abc` -> `(clojure.core/unquote abc)`\n   - `~@abc` -> `(clojure.core/unquote-splicing abc)`\n\n - fold metadata into \"owner\" node\n\nErrors are not expected -- any errors should represent bugs.\n\n",
  "readmeFilename": "README.md",
  "_id": "clojarse-js@0.2.0",
  "_from": "clojarse-js@"
}
